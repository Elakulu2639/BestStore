@{
}

<div class="container-lg mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="fw-bold text-primary">Order Management</h3>
    </div>

    <div class="card shadow-sm border-0">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="fw-semibold text-muted">ID</th>
                            <th class="fw-semibold text-muted">Client</th>
                            <th class="fw-semibold text-muted text-center">Units</th>
                            <th class="fw-semibold text-muted">Total</th>
                            <th class="fw-semibold text-muted">Payment Method</th>
                            <th class="fw-semibold text-muted">Payment Status</th>
                            <th class="fw-semibold text-muted">Order Status</th>
                            <th class="fw-semibold text-muted">Date</th>
                            <th class="fw-semibold text-muted text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Order order in ViewBag.Orders)
                        {
                            var (unitCount, orderTotal) = order.Items.Aggregate(
                            (Count: 0, Total: order.ShippingFee),
                            (acc, item) => (
                            acc.Count + item.Quantity,
                            acc.Total + item.Quantity * item.UnitPrice
                            ));

                            var paymentBadge = order.PaymentStatus switch
                            {
                                "pending" => "warning",
                                "accepted" => "success",
                                "canceled" => "secondary",
                                _ => "danger"
                            };

                            var orderBadge = order.OrderStatus switch
                            {
                                "created" => "warning",
                                "accepted" => "success",
                                "shipped" => "primary",
                                "delivered" => "success",
                                "returned" => "info",
                                "deleted" => "dark",
                                "canceled" => "secondary",
                                _ => "danger"
                            };

                            <tr class="position-relative">
                                <td class="fw-semibold text-muted">#@order.Id</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="ms-2">
                                            <div class="fw-semibold">@order.Client.FirstName @order.Client.LastName</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="text-center">@unitCount</td>
                                <td class="fw-semibold">@orderTotal.ToString("C")</td>
                                <td class="text-uppercase small">@order.PaymentMethod</td>
                                <td>
                                    <span class="badge bg-@paymentBadge bg-opacity-10 text-@paymentBadge rounded-pill">
                                        @order.PaymentStatus
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-@orderBadge bg-opacity-10 text-@orderBadge rounded-pill">
                                        @order.OrderStatus
                                    </span>
                                </td>
                                <td class="text-muted small">@order.CreatedAt.ToString("MMM dd, yyyy")</td>
                                <td class="text-end">
                                    <a class="btn btn-primary btn-sm text-decoration-none"
                                       asp-controller="AdminOrders"
                                       asp-action="Details"
                                       asp-route-id="@order.Id">
                                        Details
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(ViewBag.PageIndex == 1 ? "disabled" : "")">
                <a class="page-link" asp-route-pageIndex="@(ViewBag.PageIndex - 1)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                string active = i == ViewBag.PageIndex ? "active" : "";
                <li class="page-item @active">
                    <a class="page-link" asp-route-pageIndex="@i">@i</a>
                </li>
            }
            <li class="page-item @(ViewBag.PageIndex == ViewBag.TotalPages ? "disabled" : "")">
                <a class="page-link" asp-route-pageIndex="@(ViewBag.PageIndex + 1)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
 } 